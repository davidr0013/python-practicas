import tkinter as tk
from math import *

class CalculadoraCientifica:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculadora Científica")
        self.root.geometry("450x650")
        self.root.resizable(False, False)
        
        self.equation = ""

        # Configura la entrada de texto donde se mostrará la ecuación
        self.display = tk.Entry(root, font=("Arial", 20), bd=10, insertwidth=2, width=14, borderwidth=4)
        self.display.grid(row=0, column=0, columnspan=4)
        
        # Llama a la función para crear los botones de la calculadora
        self.create_buttons()
    
    def create_buttons(self):
        # Lista de etiquetas de los botones
        buttons = [
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            '0', '.', '=', '+',
            'sin', 'cos', 'tan', 'sqrt',
            'log', 'ln', '(', ')',
            'pi', 'e', 'C', 'DEL'
        ]
        
        row = 1
        col = 0
        for button in buttons:
            if button not in {'=', 'C', 'DEL'}:
                # Crea un botón numérico o de operación y lo agrega a la cuadrícula
                tk.Button(self.root, text=button, padx=20, pady=20, font=("Arial", 18), command=lambda b=button: self.append_to_equation(b)).grid(row=row, column=col)
            elif button == '=':
                # Crea el botón de igual y lo agrega a la cuadrícula
                tk.Button(self.root, text=button, padx=20, pady=20, font=("Arial", 18), command=self.calculate).grid(row=row, column=col)
            elif button == 'C':
                # Crea el botón de limpiar y lo agrega a la cuadrícula
                tk.Button(self.root, text=button, padx=20, pady=20, font=("Arial", 18), command=self.clear).grid(row=row, column=col)
            elif button == 'DEL':
                # Crea el botón de borrar y lo agrega a la cuadrícula
                tk.Button(self.root, text=button, padx=20, pady=20, font=("Arial", 18), command=self.delete).grid(row=row, column=col)
            
            col += 1
            if col > 3:
                col = 0
                row += 1
    
    def append_to_equation(self, char):
        # Agrega el carácter presionado a la ecuación y actualiza la pantalla
        self.equation += str(char)
        self.display.delete(0, tk.END)
        self.display.insert(tk.END, self.equation)
    
    def calculate(self):
        try:
            # Evalúa la ecuación y muestra el resultado en la pantalla
            self.equation = str(eval(self.equation))
            self.display.delete(0, tk.END)
            self.display.insert(tk.END, self.equation)
        except:
            # Muestra un mensaje de error si la evaluación falla
            self.display.delete(0, tk.END)
            self.display.insert(tk.END, "Error")
            self.equation = ""
    
    def clear(self):
        self.equation = ""
        self.display.delete(0, tk.END)
    
    def delete(self):
        self.equation = self.equation[:-1]
        self.display.delete(0, tk.END)
        self.display.insert(tk.END, self.equation)

if __name__ == "__main__":
    root = tk.Tk()
    calc = CalculadoraCientifica(root)
    root.mainloop()